Unity Editor version:    2022.3.58f1 (ed7f6eacb62e)
Branch:                  2022.3/staging
Build type:              Release
Batch mode:              YES
macOS version:           Version 15.2 (Build 24C101)
Darwin version:          24.2.0
Architecture:            arm64
Running under Rosetta:   NO
Available memory:        65536 MB
Using pre-set license
Pro License: YES

COMMAND LINE ARGUMENTS:
/Applications/Unity/Hub/Editor/2022.3.58f1/Unity.app/Contents/MacOS/Unity
-adb2
-batchMode
-noUpm
-name
AssetImportWorker2
-projectPath
/Users/shotasakoda/Project/Unity/SwiftUnityBridgeTest
-logFile
Logs/AssetImportWorker2.log
-srvPort
60487
Successfully changed project path to: /Users/shotasakoda/Project/Unity/SwiftUnityBridgeTest
/Users/shotasakoda/Project/Unity/SwiftUnityBridgeTest
[UnityMemory] Configuration Parameters - Can be set up in boot.config
    "memorysetup-bucket-allocator-granularity=16"
    "memorysetup-bucket-allocator-bucket-count=8"
    "memorysetup-bucket-allocator-block-size=33554432"
    "memorysetup-bucket-allocator-block-count=8"
    "memorysetup-main-allocator-block-size=16777216"
    "memorysetup-thread-allocator-block-size=16777216"
    "memorysetup-gfx-main-allocator-block-size=16777216"
    "memorysetup-gfx-thread-allocator-block-size=16777216"
    "memorysetup-cache-allocator-block-size=4194304"
    "memorysetup-typetree-allocator-block-size=2097152"
    "memorysetup-profiler-bucket-allocator-granularity=16"
    "memorysetup-profiler-bucket-allocator-bucket-count=8"
    "memorysetup-profiler-bucket-allocator-block-size=33554432"
    "memorysetup-profiler-bucket-allocator-block-count=8"
    "memorysetup-profiler-allocator-block-size=16777216"
    "memorysetup-profiler-editor-allocator-block-size=1048576"
    "memorysetup-temp-allocator-size-main=16777216"
    "memorysetup-job-temp-allocator-block-size=2097152"
    "memorysetup-job-temp-allocator-block-size-background=1048576"
    "memorysetup-job-temp-allocator-reduction-small-platforms=262144"
    "memorysetup-allocator-temp-initial-block-size-main=262144"
    "memorysetup-allocator-temp-initial-block-size-worker=262144"
    "memorysetup-temp-allocator-size-background-worker=32768"
    "memorysetup-temp-allocator-size-job-worker=262144"
    "memorysetup-temp-allocator-size-preload-manager=33554432"
    "memorysetup-temp-allocator-size-nav-mesh-worker=65536"
    "memorysetup-temp-allocator-size-audio-worker=65536"
    "memorysetup-temp-allocator-size-cloud-worker=32768"
    "memorysetup-temp-allocator-size-gi-baking-worker=262144"
    "memorysetup-temp-allocator-size-gfx=262144"
Player connection [8238514752]  Target information:

Player connection [8238514752]  * "[IP] 192.168.0.101 [Port] 0 [Flags] 2 [Guid] 1702477600 [EditorId] 1702477600 [Version] 1048832 [Id] OSXEditor(0,ShotanoMacBook-Pro.local) [Debug] 1 [PackageName] OSXEditor [ProjectName] Editor" 

Player connection [8238514752] Host joined multi-casting on [225.0.0.222:54997]...
Player connection [8238514752] Host joined alternative multi-casting on [225.0.0.222:34997]...
Input System module state changed to: Initialized.
[PhysX] Initialized MultithreadedTaskDispatcher with 16 workers.
Refreshing native plugins compatible for Editor in 7.69 ms, found 5 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Initialize engine version: 2022.3.58f1 (ed7f6eacb62e)
[Subsystems] Discovering subsystems at path /Applications/Unity/Hub/Editor/2022.3.58f1/Unity.app/Contents/Resources/UnitySubsystems
[Subsystems] Discovering subsystems at path /Users/shotasakoda/Project/Unity/SwiftUnityBridgeTest/Assets
GfxDevice: creating device client; threaded=0; jobified=0
 preferred device: Apple M3 Max (high power)
Metal devices available: 1
0: Apple M3 Max (high power)
Using device Apple M3 Max (high power)
Initializing Metal device caps: Apple M3 Max
Initialize mono
Mono path[0] = '/Applications/Unity/Hub/Editor/2022.3.58f1/Unity.app/Contents/Managed'
Mono path[1] = '/Applications/Unity/Hub/Editor/2022.3.58f1/Unity.app/Contents/MonoBleedingEdge/lib/mono/unityjit-macos'
Mono config path = '/Applications/Unity/Hub/Editor/2022.3.58f1/Unity.app/Contents/MonoBleedingEdge/etc'
Using monoOptions --debugger-agent=transport=dt_socket,embedding=1,server=y,suspend=n,address=127.0.0.1:56563
Begin MonoManager ReloadAssembly
Registering precompiled unity dll's ...
Register platform support module: /Applications/Unity/Hub/Editor/2022.3.58f1/Unity.app/Contents/PlaybackEngines/MacStandaloneSupport/UnityEditor.OSXStandalone.Extensions.dll
Register platform support module: /Applications/Unity/Hub/Editor/2022.3.58f1/PlaybackEngines/AndroidPlayer/UnityEditor.Android.Extensions.dll
Register platform support module: /Applications/Unity/Hub/Editor/2022.3.58f1/PlaybackEngines/iOSSupport/UnityEditor.iOS.Extensions.dll
Registered in 0.001236 seconds.
- Loaded All Assemblies, in  0.181 seconds
[usbmuxd] Start listen thread
[usbmuxd] Listen thread started
[usbmuxd] Send listen message
Native extension for iOS target not found
Native extension for Android target not found
Android Extension - Scanning For ADB Devices 74 ms
Native extension for OSXStandalone target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  0.265 seconds
Domain Reload Profiling: 446ms
	BeginReloadAssembly (40ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (0ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (0ms)
	RebuildCommonClasses (20ms)
	RebuildNativeTypeToScriptingClass (7ms)
	initialDomainReloadingComplete (24ms)
	LoadAllAssembliesAndSetupDomain (89ms)
		LoadAssemblies (40ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (88ms)
			TypeCache.Refresh (87ms)
				TypeCache.ScanAssembly (78ms)
			ScanForSourceGeneratedMonoScriptInfo (0ms)
			ResolveRequiredComponents (0ms)
	FinalizeReload (265ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (237ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (154ms)
			SetLoadedEditorAssemblies (3ms)
			RefreshPlugins (0ms)
			BeforeProcessingInitializeOnLoad (1ms)
			ProcessInitializeOnLoadAttributes (57ms)
			ProcessInitializeOnLoadMethodAttributes (22ms)
			AfterProcessingInitializeOnLoad (0ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (0ms)
========================================================================
Worker process is ready to serve import requests
Caller must complete domain reload
Begin MonoManager ReloadAssembly
- Loaded All Assemblies, in  0.310 seconds
Native extension for iOS target not found
Native extension for Android target not found
Native extension for OSXStandalone target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  0.284 seconds
Domain Reload Profiling: 594ms
	BeginReloadAssembly (64ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (3ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (15ms)
	RebuildCommonClasses (21ms)
	RebuildNativeTypeToScriptingClass (7ms)
	initialDomainReloadingComplete (21ms)
	LoadAllAssembliesAndSetupDomain (199ms)
		LoadAssemblies (115ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (112ms)
			TypeCache.Refresh (101ms)
				TypeCache.ScanAssembly (91ms)
			ScanForSourceGeneratedMonoScriptInfo (7ms)
			ResolveRequiredComponents (3ms)
	FinalizeReload (284ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (204ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (14ms)
			SetLoadedEditorAssemblies (4ms)
			RefreshPlugins (0ms)
			BeforeProcessingInitializeOnLoad (28ms)
			ProcessInitializeOnLoadAttributes (148ms)
			ProcessInitializeOnLoadMethodAttributes (8ms)
			AfterProcessingInitializeOnLoad (0ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (2ms)
Launching external process: /Applications/Unity/Hub/Editor/2022.3.58f1/Unity.app/Contents/Tools/UnityShaderCompiler
Launched and connected shader compiler UnityShaderCompiler after 0.02 seconds
program_source:225:60: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
                                  ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:226:52: error: no member named 'TANGENT0' in 'Mtl_VertexOut'
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
                          ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:227:51: error: no member named 'NORMAL0' in 'Mtl_VertexOut'
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
                         ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:228:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup float2' (vector of 2 'float' values)
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:229:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup half3' (vector of 3 'half' values)
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:230:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup half3' (vector of 3 'half' values)
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:231:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup half3' (vector of 3 'half' values)
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:232:50: error: no member named 'COLOR0' in 'Mtl_VertexOut'
        output.COLOR0 = input.cp[controlPointID].COLOR0;
                        ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:247:86: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].INTERNALTESSPOS0.yyy;
                                                                         ~~~~~~~~~~~ ^
program_source:248:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat0.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:249:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat0.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:250:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].INTERNALTESSPOS0.www, u_xlat0.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:251:86: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].INTERNALTESSPOS0.yyy;
                                                                         ~~~~~~~~~~~ ^
program_source:252:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat1.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:253:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat1.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:254:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].INTERNALTESSPOS0.www, u_xlat1.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:266:86: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].INTERNALTESSPOS0.yyy;
                                                                         ~~~~~~~~~~~ ^
program_source:267:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat2.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:268:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat2.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:269:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].INTERNALTESSPOS0.www, u_xlat2.xyz);
                                                                            ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    half4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    half4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_ProbesOcclusion;
    half3 unity_LightColor0;
    half3 unity_LightColor1;
    half3 unity_LightColor2;
    half3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    half4 glstate_lightmodel_ambient;
    half4 unity_AmbientSky;
    half4 unity_AmbientEquator;
    half4 unity_AmbientGround;
    half4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    half4 unity_ShadowColor;
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    half4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    half4 unity_SpecCube1_HDR;
    half4 unity_Lightmap_HDR;
    half4 unity_DynamicLightmap_HDR;
    half4 _LightColor0;
    half4 _SpecColor;
    half ___Eliminate;
    float _TessPhongStrength;
    float _TessEdgeLength;
    float _TessExtrusionAmount;
    half4 _Color;
    half4 _Specular;
    half4 _Ambient;
    half _Shininess;
    half _ShadowLum;
    half _AmbientToDiffuse;
    half4 _ToonTone;
    float4 _MainTex_ST;
};
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position, invariant ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD6 [[ user(TEXCOORD6) ]];
};
static Mtl_VertexOut vertexFunction(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
    output.TEXCOORD3.xyz = half3(u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat0.xyz);
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-VGlobals._Ambient.xyz) + half3(0.5, 0.5, 0.5);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = fma((-u_xlat16_3.xyz), half3(2.0, 2.0, 2.0), half3(1.0, 1.0, 1.0));
    output.TEXCOORD2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.TEXCOORD6.xyz = u_xlat16_2.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(3) ]] ;
    float4 TANGENT0 [[ attribute(4) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(5) ]] ;
    float4 TEXCOORD2 [[ attribute(6) ]] ;
    float4 TEXCOORD3 [[ attribute(7) ]] ;
    half4 COLOR0 [[ attribute(8) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(VGlobals, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.COLOR0 = input.cp[controlPointID].COLOR0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    // fork_phase2
    {
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].INTERNALTESSPOS0.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].INTERNALTESSPOS0.www, u_xlat0.xyz);
        u_xlat1.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].INTERNALTESSPOS0.yyy;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].INTERNALTESSPOS0.www, u_xlat1.xyz);
        u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
        u_xlat2.xyz = fma(u_xlat2.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat12 = sqrt(u_xlat12);
        u_xlat12 = u_xlat12 * VGlobals._TessEdgeLength;
        u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
        u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = u_xlat13 * VGlobals._ScreenParams.y;
        u_xlat12 = u_xlat13 / u_xlat12;
        tessFactor.edgeTessellationFactor[0] = max(u_xlat12, 1.0);
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].INTERNALTESSPOS0.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].INTERNALTESSPOS0.www, u_xlat2.xyz);
        u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
        u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat12 = sqrt(u_xlat12);
        u_xlat12 = u_xlat12 * VGlobals._ScreenParams.y;
        u_xlat1.xyz = fma(u_xlat3.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat1.x = sqrt(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * VGlobals._TessEdgeLength;
        u_xlat12 = u_xlat12 / u_xlat1.x;
        tessFactor.edgeTessellationFactor[1] = max(u_xlat12, 1.0);
        u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * VGlobals._ScreenParams.y;
        u_xlat4.xyz = fma(u_xlat1.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat4.x = sqrt(u_xlat4.x);
        u_xlat4.x = u_xlat4.x * VGlobals._TessEdgeLength;
        u_xlat0.x = u_xlat0.x / u_xlat4.x;
        tessFactor.edgeTessellationFactor[2] = max(u_xlat0.x, 1.0);
    }
    // join_phase3
    {
        u_xlat0.x = tessFactor.edgeTessellationFactor[0] + tessFactor.edgeTessellationFactor[1];
        u_xlat0.x = u_xlat0.x + tessFactor.edgeTessellationFactor[2];
        tessFactor.insideTessellationFactor = u_xlat0.x * 0.333333343;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position, invariant ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD6 [[ user(TEXCOORD6) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat5;
    float u_xlat15;
    u_xlat0.x = dot(input.cp[1].INTERNALTESSPOS0.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1 = mtl_TessCoord.yyyy * input.cp[1].INTERNALTESSPOS0;
    u_xlat1 = fma(input.cp[0].INTERNALTESSPOS0, mtl_TessCoord.xxxx, u_xlat1);
    u_xlat1 = fma(input.cp[2].INTERNALTESSPOS0, mtl_TessCoord.zzzz, u_xlat1);
    u_xlat5 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat0.x = (-u_xlat0.x) + u_xlat5;
    u_xlat0.xyz = fma((-input.cp[1].NORMAL0.xyz), u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz * mtl_TessCoord.yyy;
    u_xlat15 = dot(input.cp[0].INTERNALTESSPOS0.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.x = dot(u_xlat1.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat15 = (-u_xlat15) + u_xlat2.x;
    u_xlat2.xyz = fma((-input.cp[0].NORMAL0.xyz), float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat15 = dot(input.cp[2].INTERNALTESSPOS0.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.x = dot(u_xlat1.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat15 = (-u_xlat15) + u_xlat2.x;
    u_xlat2.xyz = fma((-input.cp[2].NORMAL0.xyz), float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat15 = (-VGlobals._TessPhongStrength) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * float3(u_xlat15);
    u_xlat0.xyz = fma(float3(VGlobals._TessPhongStrength), u_xlat0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._TessExtrusionAmount), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, u_xlat1.www, u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
    output.TEXCOORD3.xyz = half3(u_xlat0.xyz);
    u_xlat0 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat0);
    u_xlat0.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat0.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat0.xy);
    output.TEXCOORD0.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat0.xy);
    u_xlat0.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat1.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat1.zzz, u_xlat0.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat0.xyz);
    u_xlat16_3.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_3.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_3.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_4.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_3.xxx, u_xlat16_4.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_4.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_4.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_4.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-VGlobals._Ambient.xyz) + half3(0.5, 0.5, 0.5);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = fma((-u_xlat16_4.xyz), half3(2.0, 2.0, 2.0), half3(1.0, 1.0, 1.0));
    output.TEXCOORD2.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    output.TEXCOORD6.xyz = u_xlat16_3.xyz;
    return output;
}
// SHADER_STAGE_DOMAIN_end
program_source:225:60: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
                                  ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:226:52: error: no member named 'TANGENT0' in 'Mtl_VertexOut'
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
                          ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:227:51: error: no member named 'NORMAL0' in 'Mtl_VertexOut'
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
                         ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:228:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup float2' (vector of 2 'float' values)
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:229:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup half3' (vector of 3 'half' values)
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:230:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup half3' (vector of 3 'half' values)
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:231:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup half3' (vector of 3 'half' values)
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:232:50: error: no member named 'COLOR0' in 'Mtl_VertexOut'
        output.COLOR0 = input.cp[controlPointID].COLOR0;
                        ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:247:86: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].INTERNALTESSPOS0.yyy;
                                                                         ~~~~~~~~~~~ ^
program_source:248:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat0.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:249:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat0.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:250:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].INTERNALTESSPOS0.www, u_xlat0.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:251:86: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].INTERNALTESSPOS0.yyy;
                                                                         ~~~~~~~~~~~ ^
program_source:252:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat1.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:253:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat1.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:254:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].INTERNALTESSPOS0.www, u_xlat1.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:266:86: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].INTERNALTESSPOS0.yyy;
                                                                         ~~~~~~~~~~~ ^
program_source:267:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat2.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:268:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat2.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:269:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].INTERNALTESSPOS0.www, u_xlat2.xyz);
                                                                            ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    half4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    half4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_ProbesOcclusion;
    half3 unity_LightColor0;
    half3 unity_LightColor1;
    half3 unity_LightColor2;
    half3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    half4 glstate_lightmodel_ambient;
    half4 unity_AmbientSky;
    half4 unity_AmbientEquator;
    half4 unity_AmbientGround;
    half4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    half4 unity_ShadowColor;
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    half4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    half4 unity_SpecCube1_HDR;
    half4 unity_Lightmap_HDR;
    half4 unity_DynamicLightmap_HDR;
    half4 _LightColor0;
    half4 _SpecColor;
    half ___Eliminate;
    float _TessPhongStrength;
    float _TessEdgeLength;
    float _TessExtrusionAmount;
    half4 _Color;
    half4 _Specular;
    half4 _Ambient;
    half _Shininess;
    half _ShadowLum;
    half _AmbientToDiffuse;
    half4 _ToonTone;
    float4 _MainTex_ST;
};
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position, invariant ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD6 [[ user(TEXCOORD6) ]];
};
static Mtl_VertexOut vertexFunction(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    half3 u_xlat16_2;
    half3 u_xlat16_3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
    output.TEXCOORD3.xyz = half3(u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat0.xyz);
    u_xlat16_2.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_2.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_2.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_3.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_3.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_3.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_2.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_2.xxx, u_xlat16_3.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_3.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_3.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_3.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-VGlobals._Ambient.xyz) + half3(0.5, 0.5, 0.5);
    u_xlat16_3.xyz = max(u_xlat16_3.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_3.xyz = fma((-u_xlat16_3.xyz), half3(2.0, 2.0, 2.0), half3(1.0, 1.0, 1.0));
    output.TEXCOORD2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
    output.TEXCOORD6.xyz = u_xlat16_2.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(3) ]] ;
    float4 TANGENT0 [[ attribute(4) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(5) ]] ;
    float4 TEXCOORD2 [[ attribute(6) ]] ;
    float4 TEXCOORD3 [[ attribute(7) ]] ;
    half4 COLOR0 [[ attribute(8) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(VGlobals, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.COLOR0 = input.cp[controlPointID].COLOR0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    // fork_phase2
    {
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].INTERNALTESSPOS0.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].INTERNALTESSPOS0.www, u_xlat0.xyz);
        u_xlat1.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].INTERNALTESSPOS0.yyy;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].INTERNALTESSPOS0.www, u_xlat1.xyz);
        u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
        u_xlat2.xyz = fma(u_xlat2.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat12 = sqrt(u_xlat12);
        u_xlat12 = u_xlat12 * VGlobals._TessEdgeLength;
        u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
        u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = u_xlat13 * VGlobals._ScreenParams.y;
        u_xlat12 = u_xlat13 / u_xlat12;
        tessFactor.edgeTessellationFactor[0] = max(u_xlat12, 1.0);
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].INTERNALTESSPOS0.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].INTERNALTESSPOS0.www, u_xlat2.xyz);
        u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
        u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat12 = sqrt(u_xlat12);
        u_xlat12 = u_xlat12 * VGlobals._ScreenParams.y;
        u_xlat1.xyz = fma(u_xlat3.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat1.x = sqrt(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * VGlobals._TessEdgeLength;
        u_xlat12 = u_xlat12 / u_xlat1.x;
        tessFactor.edgeTessellationFactor[1] = max(u_xlat12, 1.0);
        u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * VGlobals._ScreenParams.y;
        u_xlat4.xyz = fma(u_xlat1.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat4.x = sqrt(u_xlat4.x);
        u_xlat4.x = u_xlat4.x * VGlobals._TessEdgeLength;
        u_xlat0.x = u_xlat0.x / u_xlat4.x;
        tessFactor.edgeTessellationFactor[2] = max(u_xlat0.x, 1.0);
    }
    // join_phase3
    {
        u_xlat0.x = tessFactor.edgeTessellationFactor[0] + tessFactor.edgeTessellationFactor[1];
        u_xlat0.x = u_xlat0.x + tessFactor.edgeTessellationFactor[2];
        tessFactor.insideTessellationFactor = u_xlat0.x * 0.333333343;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position, invariant ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half3 TEXCOORD6 [[ user(TEXCOORD6) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    half4 u_xlat16_1;
    float4 u_xlat2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat5;
    float u_xlat15;
    u_xlat0.x = dot(input.cp[1].INTERNALTESSPOS0.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1 = mtl_TessCoord.yyyy * input.cp[1].INTERNALTESSPOS0;
    u_xlat1 = fma(input.cp[0].INTERNALTESSPOS0, mtl_TessCoord.xxxx, u_xlat1);
    u_xlat1 = fma(input.cp[2].INTERNALTESSPOS0, mtl_TessCoord.zzzz, u_xlat1);
    u_xlat5 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat0.x = (-u_xlat0.x) + u_xlat5;
    u_xlat0.xyz = fma((-input.cp[1].NORMAL0.xyz), u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz * mtl_TessCoord.yyy;
    u_xlat15 = dot(input.cp[0].INTERNALTESSPOS0.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.x = dot(u_xlat1.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat15 = (-u_xlat15) + u_xlat2.x;
    u_xlat2.xyz = fma((-input.cp[0].NORMAL0.xyz), float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat15 = dot(input.cp[2].INTERNALTESSPOS0.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.x = dot(u_xlat1.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat15 = (-u_xlat15) + u_xlat2.x;
    u_xlat2.xyz = fma((-input.cp[2].NORMAL0.xyz), float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat15 = (-VGlobals._TessPhongStrength) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * float3(u_xlat15);
    u_xlat0.xyz = fma(float3(VGlobals._TessPhongStrength), u_xlat0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._TessExtrusionAmount), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, u_xlat1.www, u_xlat0.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
    output.TEXCOORD3.xyz = half3(u_xlat0.xyz);
    u_xlat0 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat0);
    u_xlat0.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat0.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat0.xy);
    output.TEXCOORD0.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat0.xy);
    u_xlat0.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat1.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat1.zzz, u_xlat0.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat0.xyz);
    u_xlat16_3.x = half(u_xlat0.y * u_xlat0.y);
    u_xlat16_3.x = half(fma(u_xlat0.x, u_xlat0.x, (-float(u_xlat16_3.x))));
    u_xlat16_1 = half4(u_xlat0.yzzx * u_xlat0.xyzz);
    u_xlat16_4.x = dot(VGlobals.unity_SHBr, u_xlat16_1);
    u_xlat16_4.y = dot(VGlobals.unity_SHBg, u_xlat16_1);
    u_xlat16_4.z = dot(VGlobals.unity_SHBb, u_xlat16_1);
    u_xlat16_3.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat16_3.xxx, u_xlat16_4.xyz);
    u_xlat0.w = 1.0;
    u_xlat16_4.x = half(dot(float4(VGlobals.unity_SHAr), u_xlat0));
    u_xlat16_4.y = half(dot(float4(VGlobals.unity_SHAg), u_xlat0));
    u_xlat16_4.z = half(dot(float4(VGlobals.unity_SHAb), u_xlat0));
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-VGlobals._Ambient.xyz) + half3(0.5, 0.5, 0.5);
    u_xlat16_4.xyz = max(u_xlat16_4.xyz, half3(0.0, 0.0, 0.0));
    u_xlat16_4.xyz = fma((-u_xlat16_4.xyz), half3(2.0, 2.0, 2.0), half3(1.0, 1.0, 1.0));
    output.TEXCOORD2.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;
    output.TEXCOORD6.xyz = u_xlat16_3.xyz;
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'MMD4Mecanim/MMDLit-Tess-BothFaces-Transparent': "___Eliminate" contains consecutive underscores ("__"), such names are reserved and might result in undefined behaviour (on metal)
program_source:232:60: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
                                  ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:233:52: error: no member named 'TANGENT0' in 'Mtl_VertexOut'
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
                          ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:234:51: error: no member named 'NORMAL0' in 'Mtl_VertexOut'
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
                         ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:236:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup half3' (vector of 3 'half' values)
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:237:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup half4' (vector of 4 'half' values)
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:238:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup half4' (vector of 4 'half' values)
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:239:50: error: no member named 'COLOR0' in 'Mtl_VertexOut'
        output.COLOR0 = input.cp[controlPointID].COLOR0;
                        ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:254:86: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].INTERNALTESSPOS0.yyy;
                                                                         ~~~~~~~~~~~ ^
program_source:255:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat0.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:256:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat0.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:257:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].INTERNALTESSPOS0.www, u_xlat0.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:258:86: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].INTERNALTESSPOS0.yyy;
                                                                         ~~~~~~~~~~~ ^
program_source:259:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat1.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:260:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat1.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:261:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].INTERNALTESSPOS0.www, u_xlat1.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:273:86: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].INTERNALTESSPOS0.yyy;
                                                                         ~~~~~~~~~~~ ^
program_source:274:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat2.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:275:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat2.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:276:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].INTERNALTESSPOS0.www, u_xlat2.xyz);
                                                                            ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    half4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_ProbesOcclusion;
    half3 unity_LightColor0;
    half3 unity_LightColor1;
    half3 unity_LightColor2;
    half3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    half4 glstate_lightmodel_ambient;
    half4 unity_AmbientSky;
    half4 unity_AmbientEquator;
    half4 unity_AmbientGround;
    half4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    half4 unity_ShadowColor;
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    half4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    half4 unity_SpecCube1_HDR;
    half4 unity_Lightmap_HDR;
    half4 unity_DynamicLightmap_HDR;
    half4 _LightColor0;
    half4 _SpecColor;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    half ___Eliminate;
    float _TessPhongStrength;
    float _TessEdgeLength;
    float _TessExtrusionAmount;
    half4 _Color;
    half4 _Specular;
    half4 _Ambient;
    half _Shininess;
    half _ShadowLum;
    half _AmbientToDiffuse;
    half _AddLightToonCen;
    half _AddLightToonMin;
    half4 _ToonTone;
    float4 _MainTex_ST;
};
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position, invariant ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};
static Mtl_VertexOut vertexFunction(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    half u_xlat16_4;
    half u_xlat16_9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    u_xlat3.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceLightPos0.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
    output.TEXCOORD3.xyz = half3(u_xlat2.xyz);
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat3.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(u_xlat3.xyz);
    u_xlat16_4 = fma(u_xlat16_4, VGlobals._ToonTone.y, VGlobals._ToonTone.z);
    u_xlat16_9 = u_xlat16_4 + (-VGlobals._AddLightToonCen);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_9 = fma(u_xlat16_9, u_xlat16_9, half(-1.0));
    u_xlat16_9 = max(u_xlat16_9, VGlobals._AddLightToonMin);
    u_xlat16_9 = min(u_xlat16_9, half(1.0));
    output.TEXCOORD0.w = float(u_xlat16_9);
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD0.z = float(u_xlat16_4);
    u_xlat16_4 = u_xlat16_4 + u_xlat16_4;
    output.TEXCOORD3.w = fma(u_xlat16_4, u_xlat16_4, half(-1.0));
    output.TEXCOORD3.w = clamp(output.TEXCOORD3.w, 0.0h, 1.0h);
    output.TEXCOORD2.w = half(0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(3) ]] ;
    float4 TANGENT0 [[ attribute(4) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(5) ]] ;
    float4 TEXCOORD2 [[ attribute(6) ]] ;
    float4 TEXCOORD3 [[ attribute(7) ]] ;
    half4 COLOR0 [[ attribute(8) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(VGlobals, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.COLOR0 = input.cp[controlPointID].COLOR0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    // fork_phase2
    {
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].INTERNALTESSPOS0.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].INTERNALTESSPOS0.www, u_xlat0.xyz);
        u_xlat1.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].INTERNALTESSPOS0.yyy;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].INTERNALTESSPOS0.www, u_xlat1.xyz);
        u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
        u_xlat2.xyz = fma(u_xlat2.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat12 = sqrt(u_xlat12);
        u_xlat12 = u_xlat12 * VGlobals._TessEdgeLength;
        u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
        u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = u_xlat13 * VGlobals._ScreenParams.y;
        u_xlat12 = u_xlat13 / u_xlat12;
        tessFactor.edgeTessellationFactor[0] = max(u_xlat12, 1.0);
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].INTERNALTESSPOS0.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].INTERNALTESSPOS0.www, u_xlat2.xyz);
        u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
        u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat12 = sqrt(u_xlat12);
        u_xlat12 = u_xlat12 * VGlobals._ScreenParams.y;
        u_xlat1.xyz = fma(u_xlat3.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat1.x = sqrt(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * VGlobals._TessEdgeLength;
        u_xlat12 = u_xlat12 / u_xlat1.x;
        tessFactor.edgeTessellationFactor[1] = max(u_xlat12, 1.0);
        u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * VGlobals._ScreenParams.y;
        u_xlat4.xyz = fma(u_xlat1.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat4.x = sqrt(u_xlat4.x);
        u_xlat4.x = u_xlat4.x * VGlobals._TessEdgeLength;
        u_xlat0.x = u_xlat0.x / u_xlat4.x;
        tessFactor.edgeTessellationFactor[2] = max(u_xlat0.x, 1.0);
    }
    // join_phase3
    {
        u_xlat0.x = tessFactor.edgeTessellationFactor[0] + tessFactor.edgeTessellationFactor[1];
        u_xlat0.x = u_xlat0.x + tessFactor.edgeTessellationFactor[2];
        tessFactor.insideTessellationFactor = u_xlat0.x * 0.333333343;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position, invariant ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    half2 u_xlat16_4;
    float u_xlat5;
    half u_xlat16_9;
    float u_xlat15;
    u_xlat0.x = dot(input.cp[1].INTERNALTESSPOS0.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1 = mtl_TessCoord.yyyy * input.cp[1].INTERNALTESSPOS0;
    u_xlat1 = fma(input.cp[0].INTERNALTESSPOS0, mtl_TessCoord.xxxx, u_xlat1);
    u_xlat1 = fma(input.cp[2].INTERNALTESSPOS0, mtl_TessCoord.zzzz, u_xlat1);
    u_xlat5 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat0.x = (-u_xlat0.x) + u_xlat5;
    u_xlat0.xyz = fma((-input.cp[1].NORMAL0.xyz), u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz * mtl_TessCoord.yyy;
    u_xlat15 = dot(input.cp[0].INTERNALTESSPOS0.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.x = dot(u_xlat1.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat15 = (-u_xlat15) + u_xlat2.x;
    u_xlat2.xyz = fma((-input.cp[0].NORMAL0.xyz), float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat15 = dot(input.cp[2].INTERNALTESSPOS0.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.x = dot(u_xlat1.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat15 = (-u_xlat15) + u_xlat2.x;
    u_xlat2.xyz = fma((-input.cp[2].NORMAL0.xyz), float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat15 = (-VGlobals._TessPhongStrength) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * float3(u_xlat15);
    u_xlat0.xyz = fma(float3(VGlobals._TessPhongStrength), u_xlat0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._TessExtrusionAmount), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    u_xlat2.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat1.zzz, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, u_xlat1.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], u_xlat1.wwww, u_xlat0);
    u_xlat3.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceLightPos0.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
    output.TEXCOORD3.xyz = half3(u_xlat2.xyz);
    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(u_xlat3.xyz);
    u_xlat16_4.x = fma(u_xlat16_4.x, VGlobals._ToonTone.y, VGlobals._ToonTone.z);
    u_xlat16_9 = u_xlat16_4.x + (-VGlobals._AddLightToonCen);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_9 = fma(u_xlat16_9, u_xlat16_9, half(-1.0));
    u_xlat16_9 = max(u_xlat16_9, VGlobals._AddLightToonMin);
    u_xlat16_4.y = min(u_xlat16_9, half(1.0));
    output.TEXCOORD0.zw = float2(u_xlat16_4.xy);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    output.TEXCOORD3.w = fma(u_xlat16_4.x, u_xlat16_4.x, half(-1.0));
    output.TEXCOORD3.w = clamp(output.TEXCOORD3.w, 0.0h, 1.0h);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    output.TEXCOORD0.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    output.TEXCOORD2.w = half(0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    return output;
}
// SHADER_STAGE_DOMAIN_end
program_source:232:60: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
                                  ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:233:52: error: no member named 'TANGENT0' in 'Mtl_VertexOut'
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
                          ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:234:51: error: no member named 'NORMAL0' in 'Mtl_VertexOut'
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
                         ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:236:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup half3' (vector of 3 'half' values)
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:237:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup half4' (vector of 4 'half' values)
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:238:53: error: assigning to 'float4' (vector of 4 'float' values) from incompatible type 'threadgroup half4' (vector of 4 'half' values)
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
                           ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~
program_source:239:50: error: no member named 'COLOR0' in 'Mtl_VertexOut'
        output.COLOR0 = input.cp[controlPointID].COLOR0;
                        ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:254:86: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].INTERNALTESSPOS0.yyy;
                                                                         ~~~~~~~~~~~ ^
program_source:255:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat0.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:256:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat0.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:257:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].INTERNALTESSPOS0.www, u_xlat0.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:258:86: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].INTERNALTESSPOS0.yyy;
                                                                         ~~~~~~~~~~~ ^
program_source:259:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat1.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:260:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat1.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:261:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].INTERNALTESSPOS0.www, u_xlat1.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:273:86: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].INTERNALTESSPOS0.yyy;
                                                                         ~~~~~~~~~~~ ^
program_source:274:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat2.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:275:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat2.xyz);
                                                                            ~~~~~~~~~~~ ^
program_source:276:89: error: no member named 'INTERNALTESSPOS0' in 'Mtl_VertexOut'
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].INTERNALTESSPOS0.www, u_xlat2.xyz);
                                                                            ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
    float4 unity_CameraWorldClipPlanes[6];
    float4 hlslcc_mtx4x4unity_CameraProjection[4];
    float4 hlslcc_mtx4x4unity_CameraInvProjection[4];
    float4 hlslcc_mtx4x4unity_WorldToCamera[4];
    float4 hlslcc_mtx4x4unity_CameraToWorld[4];
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    half4 unity_4LightAtten0;
    half4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    half4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    half4 unity_SHAr;
    half4 unity_SHAg;
    half4 unity_SHAb;
    half4 unity_SHBr;
    half4 unity_SHBg;
    half4 unity_SHBb;
    half4 unity_SHC;
    half4 unity_OcclusionMaskSelector;
    half4 unity_ProbesOcclusion;
    half3 unity_LightColor0;
    half3 unity_LightColor1;
    half3 unity_LightColor2;
    half3 unity_LightColor3;
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 hlslcc_mtx4x4glstate_matrix_transpose_modelview0[4];
    half4 glstate_lightmodel_ambient;
    half4 unity_AmbientSky;
    half4 unity_AmbientEquator;
    half4 unity_AmbientGround;
    half4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    half4 unity_ShadowColor;
    half4 unity_FogColor;
    float4 unity_FogParams;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    half4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    half4 unity_SpecCube1_HDR;
    half4 unity_Lightmap_HDR;
    half4 unity_DynamicLightmap_HDR;
    half4 _LightColor0;
    half4 _SpecColor;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    half ___Eliminate;
    float _TessPhongStrength;
    float _TessEdgeLength;
    float _TessExtrusionAmount;
    half4 _Color;
    half4 _Specular;
    half4 _Ambient;
    half _Shininess;
    half _ShadowLum;
    half _AmbientToDiffuse;
    half _AddLightToonCen;
    half _AddLightToonMin;
    half4 _ToonTone;
    float4 _MainTex_ST;
};
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 mtl_Position [[ position, invariant ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};
static Mtl_VertexOut vertexFunction(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    half u_xlat16_4;
    half u_xlat16_9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    u_xlat3.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceLightPos0.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
    output.TEXCOORD3.xyz = half3(u_xlat2.xyz);
    u_xlat16_4 = dot(u_xlat1.xyz, u_xlat3.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(u_xlat3.xyz);
    u_xlat16_4 = fma(u_xlat16_4, VGlobals._ToonTone.y, VGlobals._ToonTone.z);
    u_xlat16_9 = u_xlat16_4 + (-VGlobals._AddLightToonCen);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_9 = fma(u_xlat16_9, u_xlat16_9, half(-1.0));
    u_xlat16_9 = max(u_xlat16_9, VGlobals._AddLightToonMin);
    u_xlat16_9 = min(u_xlat16_9, half(1.0));
    output.TEXCOORD0.w = float(u_xlat16_9);
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD0.z = float(u_xlat16_4);
    u_xlat16_4 = u_xlat16_4 + u_xlat16_4;
    output.TEXCOORD3.w = fma(u_xlat16_4, u_xlat16_4, half(-1.0));
    output.TEXCOORD3.w = clamp(output.TEXCOORD3.w, 0.0h, 1.0h);
    output.TEXCOORD2.w = half(0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    half4 COLOR0 [[ user(COLOR0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(3) ]] ;
    float4 TANGENT0 [[ attribute(4) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
    float4 TEXCOORD1 [[ attribute(5) ]] ;
    float4 TEXCOORD2 [[ attribute(6) ]] ;
    float4 TEXCOORD3 [[ attribute(7) ]] ;
    half4 COLOR0 [[ attribute(8) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(3) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(VGlobals, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD1 = input.cp[controlPointID].TEXCOORD1;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
        output.TEXCOORD3 = input.cp[controlPointID].TEXCOORD3;
        output.COLOR0 = input.cp[controlPointID].COLOR0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    // fork_phase2
    {
        u_xlat0.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].INTERNALTESSPOS0.yyy;
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].INTERNALTESSPOS0.www, u_xlat0.xyz);
        u_xlat1.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].INTERNALTESSPOS0.yyy;
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].INTERNALTESSPOS0.www, u_xlat1.xyz);
        u_xlat2.xyz = u_xlat0.xyz + u_xlat1.xyz;
        u_xlat2.xyz = fma(u_xlat2.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat12 = sqrt(u_xlat12);
        u_xlat12 = u_xlat12 * VGlobals._TessEdgeLength;
        u_xlat2.xyz = u_xlat0.xyz + (-u_xlat1.xyz);
        u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = u_xlat13 * VGlobals._ScreenParams.y;
        u_xlat12 = u_xlat13 / u_xlat12;
        tessFactor.edgeTessellationFactor[0] = max(u_xlat12, 1.0);
        u_xlat2.xyz = VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].INTERNALTESSPOS0.yyy;
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat2.xyz);
        u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].INTERNALTESSPOS0.www, u_xlat2.xyz);
        u_xlat3.xyz = u_xlat1.xyz + u_xlat2.xyz;
        u_xlat1.xyz = u_xlat1.xyz + (-u_xlat2.xyz);
        u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat12 = sqrt(u_xlat12);
        u_xlat12 = u_xlat12 * VGlobals._ScreenParams.y;
        u_xlat1.xyz = fma(u_xlat3.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat1.x = sqrt(u_xlat1.x);
        u_xlat1.x = u_xlat1.x * VGlobals._TessEdgeLength;
        u_xlat12 = u_xlat12 / u_xlat1.x;
        tessFactor.edgeTessellationFactor[1] = max(u_xlat12, 1.0);
        u_xlat1.xyz = u_xlat0.xyz + u_xlat2.xyz;
        u_xlat0.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * VGlobals._ScreenParams.y;
        u_xlat4.xyz = fma(u_xlat1.xyz, float3(0.5, 0.5, 0.5), (-VGlobals._WorldSpaceCameraPos.xyzx.xyz));
        u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat4.x = sqrt(u_xlat4.x);
        u_xlat4.x = u_xlat4.x * VGlobals._TessEdgeLength;
        u_xlat0.x = u_xlat0.x / u_xlat4.x;
        tessFactor.edgeTessellationFactor[2] = max(u_xlat0.x, 1.0);
    }
    // join_phase3
    {
        u_xlat0.x = tessFactor.edgeTessellationFactor[0] + tessFactor.edgeTessellationFactor[1];
        u_xlat0.x = u_xlat0.x + tessFactor.edgeTessellationFactor[2];
        tessFactor.insideTessellationFactor = u_xlat0.x * 0.333333343;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position, invariant ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    half3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    half4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    half4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(1) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(2) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    half2 u_xlat16_4;
    float u_xlat5;
    half u_xlat16_9;
    float u_xlat15;
    u_xlat0.x = dot(input.cp[1].INTERNALTESSPOS0.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1 = mtl_TessCoord.yyyy * input.cp[1].INTERNALTESSPOS0;
    u_xlat1 = fma(input.cp[0].INTERNALTESSPOS0, mtl_TessCoord.xxxx, u_xlat1);
    u_xlat1 = fma(input.cp[2].INTERNALTESSPOS0, mtl_TessCoord.zzzz, u_xlat1);
    u_xlat5 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat0.x = (-u_xlat0.x) + u_xlat5;
    u_xlat0.xyz = fma((-input.cp[1].NORMAL0.xyz), u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xyz * mtl_TessCoord.yyy;
    u_xlat15 = dot(input.cp[0].INTERNALTESSPOS0.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.x = dot(u_xlat1.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat15 = (-u_xlat15) + u_xlat2.x;
    u_xlat2.xyz = fma((-input.cp[0].NORMAL0.xyz), float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat15 = dot(input.cp[2].INTERNALTESSPOS0.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.x = dot(u_xlat1.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat15 = (-u_xlat15) + u_xlat2.x;
    u_xlat2.xyz = fma((-input.cp[2].NORMAL0.xyz), float3(u_xlat15), u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat15 = (-VGlobals._TessPhongStrength) + 1.0;
    u_xlat1.xyz = u_xlat1.xyz * float3(u_xlat15);
    u_xlat0.xyz = fma(float3(VGlobals._TessPhongStrength), u_xlat0.xyz, u_xlat1.xyz);
    u_xlat1.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._TessExtrusionAmount), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat2 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat3 = u_xlat2.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat2.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat2.zzzz, u_xlat3);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat3);
    u_xlat2.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat1.zzz, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, u_xlat1.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], u_xlat1.wwww, u_xlat0);
    u_xlat3.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceLightPos0.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + VGlobals._WorldSpaceCameraPos.xyzx.xyz;
    output.TEXCOORD3.xyz = half3(u_xlat2.xyz);
    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    output.TEXCOORD1.xyz = half3(u_xlat1.xyz);
    output.TEXCOORD2.xyz = half3(u_xlat3.xyz);
    u_xlat16_4.x = fma(u_xlat16_4.x, VGlobals._ToonTone.y, VGlobals._ToonTone.z);
    u_xlat16_9 = u_xlat16_4.x + (-VGlobals._AddLightToonCen);
    u_xlat16_9 = u_xlat16_9 + u_xlat16_9;
    u_xlat16_9 = fma(u_xlat16_9, u_xlat16_9, half(-1.0));
    u_xlat16_9 = max(u_xlat16_9, VGlobals._AddLightToonMin);
    u_xlat16_4.y = min(u_xlat16_9, half(1.0));
    output.TEXCOORD0.zw = float2(u_xlat16_4.xy);
    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;
    output.TEXCOORD3.w = fma(u_xlat16_4.x, u_xlat16_4.x, half(-1.0));
    output.TEXCOORD3.w = clamp(output.TEXCOORD3.w, 0.0h, 1.0h);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    output.TEXCOORD0.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    output.TEXCOORD2.w = half(0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD4.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'MMD4Mecanim/MMDLit-Tess-BothFaces-Transparent': "___Eliminate" contains consecutive underscores ("__"), such names are reserved and might result in undefined behaviour (on metal)
Refreshing native plugins compatible for Editor in 1.50 ms, found 5 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 3459 Unused Serialized files (Serialized files now loaded: 0)
Unloading 49 unused Assets / (3.8 MB). Loaded Objects now: 3923.
Memory consumption went from 157.9 MB to 154.1 MB.
Total: 3.445250 ms (FindLiveObjects: 0.098584 ms CreateObjectMapping: 0.037500 ms MarkObjects: 2.104208 ms  DeleteObjects: 1.204542 ms)

AssetImportParameters requested are different than current active one (requested -> active):
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:CustomObjectIndexerAttribute: 9a22284fe3817be447336de3de66b15e -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:SearchIndexIgnoredProperties: e643bd26f0fe6173181afceb89e7c659 -> 
  custom:AudioImporter_EditorPlatform: 3918e3fc78b5a79bad01e8451be0beb8 -> 
  custom:framework-osx-AVFoundation: e770b220cccbd017edd2c1fefb359320 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
========================================================================
Received Prepare
Caller must complete domain reload
Begin MonoManager ReloadAssembly
Thread 0x33e187000 may have been prematurely finalized
- Loaded All Assemblies, in  0.239 seconds
Native extension for iOS target not found
Native extension for Android target not found
Native extension for OSXStandalone target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  0.349 seconds
Domain Reload Profiling: 588ms
	BeginReloadAssembly (74ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (2ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (24ms)
	RebuildCommonClasses (19ms)
	RebuildNativeTypeToScriptingClass (7ms)
	initialDomainReloadingComplete (11ms)
	LoadAllAssembliesAndSetupDomain (127ms)
		LoadAssemblies (111ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (44ms)
			TypeCache.Refresh (35ms)
				TypeCache.ScanAssembly (30ms)
			ScanForSourceGeneratedMonoScriptInfo (5ms)
			ResolveRequiredComponents (3ms)
	FinalizeReload (349ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (188ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (18ms)
			SetLoadedEditorAssemblies (2ms)
			RefreshPlugins (0ms)
			BeforeProcessingInitializeOnLoad (28ms)
			ProcessInitializeOnLoadAttributes (130ms)
			ProcessInitializeOnLoadMethodAttributes (10ms)
			AfterProcessingInitializeOnLoad (1ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (2ms)
Refreshing native plugins compatible for Editor in 1.03 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 3384 Unused Serialized files (Serialized files now loaded: 0)
Unloading 46 unused Assets / (36.8 KB). Loaded Objects now: 3899.
Memory consumption went from 144.6 MB to 144.6 MB.
Total: 2.198083 ms (FindLiveObjects: 0.115375 ms CreateObjectMapping: 0.031084 ms MarkObjects: 2.009250 ms  DeleteObjects: 0.042083 ms)

Prepare: number of updated asset objects reloaded= 12
AssetImportParameters requested are different than current active one (requested -> active):
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:CustomObjectIndexerAttribute: 9a22284fe3817be447336de3de66b15e -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:SearchIndexIgnoredProperties: e643bd26f0fe6173181afceb89e7c659 -> 
  custom:AudioImporter_EditorPlatform: 3918e3fc78b5a79bad01e8451be0beb8 -> 
  custom:framework-osx-AVFoundation: e770b220cccbd017edd2c1fefb359320 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:scripting/precompiled-assembly-types:Assembly-CSharp-Editor: d028f476279d1b8808111011b14828d0 -> 54e1fe3dc3353756d0b2ee4b7d9da6e2
  custom:scripting/precompiled-assembly-types:Assembly-CSharp: f30d9c771f53c5f1fe796bd61697dec4 -> 13db779dc764652a83973ce5abc76b37
  custom:scripting/precompiled-assembly-types:MMD4MecanimEditor:  -> e6d47a2a42c696f14c28bb318b9a327c
  custom:scripting/precompiled-assembly-types:MMD4Mecanim:  -> d0c76d31b33825758eff3db8944b0a2d
========================================================================
Received Prepare
Caller must complete domain reload
Begin MonoManager ReloadAssembly
Thread 0x338213000 may have been prematurely finalized
- Loaded All Assemblies, in  0.203 seconds
Native extension for iOS target not found
Native extension for Android target not found
Native extension for OSXStandalone target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  0.353 seconds
Domain Reload Profiling: 556ms
	BeginReloadAssembly (71ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (3ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (22ms)
	RebuildCommonClasses (20ms)
	RebuildNativeTypeToScriptingClass (7ms)
	initialDomainReloadingComplete (11ms)
	LoadAllAssembliesAndSetupDomain (94ms)
		LoadAssemblies (113ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (8ms)
			TypeCache.Refresh (4ms)
				TypeCache.ScanAssembly (0ms)
			ScanForSourceGeneratedMonoScriptInfo (0ms)
			ResolveRequiredComponents (3ms)
	FinalizeReload (353ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (185ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (15ms)
			SetLoadedEditorAssemblies (2ms)
			RefreshPlugins (0ms)
			BeforeProcessingInitializeOnLoad (28ms)
			ProcessInitializeOnLoadAttributes (128ms)
			ProcessInitializeOnLoadMethodAttributes (10ms)
			AfterProcessingInitializeOnLoad (0ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (2ms)
Refreshing native plugins compatible for Editor in 1.06 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 3384 Unused Serialized files (Serialized files now loaded: 0)
Unloading 19 unused Assets / (31.3 KB). Loaded Objects now: 3890.
Memory consumption went from 148.2 MB to 148.1 MB.
Total: 2.211875 ms (FindLiveObjects: 0.115917 ms CreateObjectMapping: 0.034125 ms MarkObjects: 2.029458 ms  DeleteObjects: 0.031833 ms)

Prepare: number of updated asset objects reloaded= 0
AssetImportParameters requested are different than current active one (requested -> active):
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:CustomObjectIndexerAttribute: 9a22284fe3817be447336de3de66b15e -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:SearchIndexIgnoredProperties: e643bd26f0fe6173181afceb89e7c659 -> 
  custom:AudioImporter_EditorPlatform: 3918e3fc78b5a79bad01e8451be0beb8 -> 
  custom:framework-osx-AVFoundation: e770b220cccbd017edd2c1fefb359320 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:scripting/precompiled-assembly-types:Assembly-CSharp-Editor: d028f476279d1b8808111011b14828d0 -> 54e1fe3dc3353756d0b2ee4b7d9da6e2
  custom:scripting/precompiled-assembly-types:Assembly-CSharp: f30d9c771f53c5f1fe796bd61697dec4 -> 13db779dc764652a83973ce5abc76b37
  custom:scripting/precompiled-assembly-types:MMD4MecanimEditor:  -> e6d47a2a42c696f14c28bb318b9a327c
  custom:scripting/precompiled-assembly-types:MMD4Mecanim:  -> d0c76d31b33825758eff3db8944b0a2d
Editor requested this worker to shutdown with reason: Scaling down because of idle timeout
TcpMessagingSession - receive error: operation aborted. errorcode: 89, details: Operation aborted.
AssetImportWorker is now disconnected from the server
Process exiting
